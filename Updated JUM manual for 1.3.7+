Requirements: 
     ● Perl (5+)
     ● Samtools (1.3.1+)
     ● Bedtools (2.26.0+)
     ● R
     ● STAR
     
Installation: Download the JUM package to a local folder of choice (for example, /home/eagle/) and unpack.

Notes: 1) JUM uses RNA-seq reads mapped to splice junctions to construct statistical models and quantify AS changes, 
therefore the depth of RNA-seq datasets can affect how many alternative splicing events will be found. We have 
successfully tested Drosophila samples of as low as ~20M reads and human samples of as low as ~35M reads.
2) JUM uses biological replicates to build statistical models. Ideally for each condition the user will have >= 2 replicates. 
There is a workaround if the user only has one replicate for each biological condition. Plese contact the author if this is the case. 
3) Perl modules Array::Utils and Statistics::Descriptive are required. To install perl module using CPAN on a server without root access, do the following:
   wget -O- http://cpanmin.us | perl - -l ~/perl5 App::cpanminus local::lib
   eval `perl -I ~/perl5/lib/perl5 -Mlocal::lib`
   echo 'eval `perl -I ~/perl5/lib/perl5 -Mlocal::lib`' >> ~/.profile
   echo 'export MANPATH=$HOME/perl5/man:$MANPATH' >> ~/.profile
   (This assumes your system profile is named .profile, you may need to change that to be .bash_profile, .bashrc, etc.)
   
   Now, to configure cpan:
   >>cpan
   Would you like to configure as much as possible automatically? [yes] yes

   What approach do you want?  (Choose 'local::lib', 'sudo' or 'manual')
   [local::lib] local::lib
   Would you like me to append that to /home/eagle/.bashrc now? [yes] yes
   >>exit

   Now to install whatever perl module you want:
   cpanm Module::Name
   In this case, it should be:
   cpanm Array::Utils 
   and
   cpanm Statistics::Descriptive

Manual: 
1. Perform the first round STAR mapping of RNA-seq reads as instructed in the STAR manual.  Below are suggested commands (suppose 100bp paired end reads):
   a) Making genome index:
      mkdir genome_index_STAR_r1
      STAR --runThreadN 3 --runMode genomeGenerate --genomeDir genome_index_STAR_r1 --genomeFastaFiles hg38.fa --sjdbGTFfile hg38_genes.gtf --sjdbOverhang 100
   b) First round of mapping:
      STAR --runThreadN 3 --genomeDir genome_index_STAR_r1 --outFileNamePrefix ctrl_1st --readFilesIn ctrl_R01.fastq ctrl_R02.fastq --outSJfilterReads Unique
      
2. Create a working folder, (for example, /home/eagle/JUMwork) and copy STAR output with suffix “Aligned.out.sam” and 
“SJ.out.tab” from all samples to the folder. For example, suppose the user has IndexA (control), IndexB (control), IndexC (treatment) 
and IndexD (treatment), then the user should copy the following STAR output files to /home/eagle/JUMwork (basically, with suffix “SJ.out.tab”).

   IndexASJ.out.tab
   IndexBSJ.out.tab
   IndexCSJ.out.tab
   IndexDSJ.out.tab

3. Run JUM_1.sh in the JUM package:
   bash /home/eagle/JUM_1.3.8/JUM_1.sh
   
   This step will create a file called: combined_SJ_out_tab_unannotated_for_2nd_pass_genome_generation.txt

4. Delete all SJ.out.tab files from this folder (to avoid confusion with second round STAR mapping results).

5. Perform second round of STAR mapping of RNA-seq reads. Below are suggested commands: 
   a) Making genome index:
      mkdir genome_index_STAR_r2
      STAR --runThreadN 3 --runMode genomeGenerate --genomeDir genome_index_STAR_r2 --genomeFastaFiles hg38.fa --sjdbFileChrStartEnd combined_SJ_out_tab_unannotated_for_2nd_pass_genome_generation.txt --sjdbGTFfile hg38_genes.gtf --sjdbOverhang 100
   b) Second round of mapping:
      STAR --runThreadN 3 --genomeDir genome_index_STAR_r2 --outFileNamePrefix ctrl_2nd --readFilesIn ctrl_R01.fastq ctrl_R02.fastq --outSJfilterReads Unique --outSAMstrandField intronMotif --outFilterMultimapNmax 1

6. Copy the resulted second round STAR output with suffix “Aligned.out.sam” and “SJ.out.tab” to the working folder (i.e. /home/eagle/JUMwork).

7. Use samtools and bedtools to transform all Aligned.out.sam files (use the exact naming system as below):
   samtools view -bS IndexAAligned.out.sam > IndexAAligned.out.bam
   samtools sort IndexAAligned.out.bam > IndexAAligned.out_sorted.bam
   samtools index IndexAAligned.out_sorted.bam
   do this for all your samples.
    
8. Run JUM_2-1.sh
   bash /home/eagle/JUM_1.3.8/JUM_2-1.sh 

9. Create subdirectories for each condition.  For example, control and treatment:
   mkdir control
   mkdir treatment

10. Copy files with suffix “SJ.out.tab_strand_symbol_scaled” from the current directory to the corresponding condition subdirectories, respectively:
   cp IndexA_SJ.out.tab_strand_symbol_scaled control/
   cp IndexB_SJ.out.tab_strand_symbol_scaled control/
   cp IndexC_SJ.out.tab_strand_symbol_scaled treatment/
   cp IndexD_SJ.out.tab_strand_symbol_scaled treatment/

11. Copy the file "UNION_junc_coor_with_junction_ID.txt" to each of the condition subdirectories:
   cp UNION_junc_coor_with_junction_ID.txt control/
   cp UNION_junc_coor_with_junction_ID.txt treatment/
   
12. In each of the subdirectories, run JUM-2-2.sh like:
    bash JUM_2-2.sh #directory #read_threshold #condition_name #file_number
    (the command needs four input parameters:
         parameter a. #directory: path of the downloaded JUM package.
         parameter b. #read_number_threshold_for_junction: JUM will only consider junctions that have more than this # of unique reads mapped to it 
                     in at least #file_number samples out of all replicates under one of the conditions as valid junctions;
         parameter c. #condition_name: the name of the condition, for example, control)
	 parameter d. #file_number: JUM will only consider junctions that have more than this # of unique reads mapped to it 
                     in at least #file_number samples out of all replicates under one of the conditions as valid junctions;
    
    Example:
    cd control
    bash /home/eagle/JUM_1.3.8/JUM_2-2.sh ~/JUM_1.3.8 5 control 2
    cd ..
    cd treatment
    bash /home/eagle/JUM_1.3.8/JUM_2-2.sh ~/JUM_1.3.8 5 treatment 2
    cd ..
    after running, go back to the parent directory from the current subdirectories.
    
    For choice of parameter b and d, users can choose based on the sequencing depth and number of replicates they have for each condition.  If the RNA-seq
    samples are in general sequenced deep (~40M+ for drosophila and ~60M+ for human samples, for example), the user can choose to have junctions that have more than, say, 5 reads in all
    of the replicates of one condition to filter junctions.  Otherwise, the user can choose to have junctions that receive more than, say, 5 reads in the majority of the replicates of the condition. 
    The user can also choose parameter b to be 10 or even more if the sequencing depth is much deeper. It also depends on how many replicates the user has. If the user only has, say, two replicates, 
    then it is better to choose junctions to have more than, say, 5 reads in both replicates. If the user has more than 3, or even more replicates, then it is probably OK to choose junctions that have more 
    than, say, 5 reads in the majority of the replicates, for example, parameter d can be chosen as # of replicates -1 here in the situation here.
    
    For example, if the user has 3 replicates for control that are sequenced with medium depth, then parameter b can be 5 and parameter d can be 2 (2 out of 3 replicates in control samples have more than 5 reads 
    in a junction that is to be taken for downstream analysis).  If the user has 4 replciates for control that are deeply sequenced, then parameter d can be 4.
    
    Note, parameter d can be different for the control and experimental condition samples, depends on how many replicates each condition has.

13. Copy the files with suffix "junction_counts.txt" and "formatted.txt" from each of the condition subdirectories to the current directory:
    cp control/*junction_counts.txt .
    cp treatment/*junction_counts.txt .
    cp control/*formatted.txt .
    cp treatment/*formatted.txt .
    
14. Run JUM_2-3.sh under the current major directory (i.e. /home/eagle/JUMwork) (this step may take up to several hours depending on number of samples to run):
   bash /home/eagle/JUM_1.3.8/JUM_2-3.sh #directory #read_threshold_1 #file_number #read_threshold_2 #read_length
   (the command needs five input parameters: 
        parameter a. #directory: path of the downloaded JUM package.
        parameter b. #read_number_threshold_for_junction: JUM will only consider junctions that have more than this # of unique reads mapped to it 
                     in at least #file_number samples out of all replicates under one of the condition as valid junctions;
	parameter c. #file_number: JUM will only consider junctions that have more than this # of unique reads mapped to it 
                     in at least this # of samples out of all replicates under one of the conditions as valid junctions; see step 13 for detials. In the situation when 
		     this parameter is different for control and experimental conditions (as run in step 13 when replicates numbers are different in control and the experimental
		     conditions, the user can choose whichever the bigger number).
        parameter d. #read_number_threshod_for_exon_intron_boundary: JUM will only consider retained introns that have more than this # of unique 
                     reads mapped to the upstream exon-intron and downstream intron-exon boundaries as valid potential retained introns;
        parameter e. #read_length: the length of the RNA-seq reads)
    
    Example: 
    bash /home/eagle/JUM_1.3.8/JUM_2-3.sh /home/eagle/JUM_1.3.8 5 2 2 100
    JUM_2-3.sh outputs results into a new folder called JUM_diff/
    
15. Run the R script in the JUM package, with a user-provided experiment design file (txt format) for differential AS analysis. 
   Rscript /home/eagle/JUM_1.3.8/R_script_JUM.R experiment_design.txt > outputFile.Rout 2> errorFile.Rout
      An example experiment_design.txt file is included in the package for the example below: suppose the user has IndexA, IndexB, IndexC and IndexD samples. 
      IndexA and IndexB are drug treated biological replicates and IndexC and IndexD are control biological replicates. JUM_2-3.sh then outputs the following files 
      IndexA_2nd_combined_count.txt, IndexB_2nd_combined_count.txt, IndexC_2nd_combined_count.txt, and IndexD_2nd_combined_count.txt. Note, it is important to keep 
      the samples names and condition names in the same alphabetic order in the experiment design file.  For example, name the treated sample replicates as "rep1", "rep2" 
      and untreated samples as "untreated_1" and "untreated_2".  R will read all the files with the suffix "_combined_count.txt" in alphabetical order, so it is important
      to make sure that the naming system will allow the replicates under the same condition to be read together instead of separately.
      R_script_JUM.R will output a file called "AS_differential.txt"

16. Run JUM_3.sh:
        bash /home/eagle/JUM_1.3.8/JUM_3.sh #directory #pvalue|adjusted_pvalue #threshold #number_of_samples #<number of control_samples|treated_samples>
         (the command needs five input parameters: 
         parameter a. #directory: path of the downloaded JUM package
         parameter b. #pvalue|adjusted_pvalue: statistical standard to use as cut-off. Choose between pvalue or padj (multi-test adjusted pvalue).
         parameter c. #threshold: cutoff value for pvalue or padj (I.e. 0.05, 0.01, …)
         parameter d. #number_of_samples: total number of RNA-seq samples
         Parameter e. #the number of control samples or the number of treated samples, whichever is smaller)
       
       For example, suppose the user has a total of 4 samples (two controls and two treated), and wish to use pvalue 0.05 as cut off, then run JUM_3.sh as follows:
        bash /home/eagle/JUM_1.3.8/JUM_3.sh /home/eagle/JUM_1.3.8 pvalue 0.05 4 2

       JUM_3.sh output a folder: FINAL_JUM_OUTPUT with the following files:
       AS_differential_JUM_output_A3SS_events_pvalue_0.05.txt
       AS_differential_JUM_output_A5SS_events_pvalue_0.05.txt
       AS_differential_JUM_output_cassette_exon_events_pvalue_0.05.txt
       AS_differential_JUM_output_intron_retention_pvalue_0.05.txt
       AS_differential_JUM_output_mixed_events_pvalue_0.05.txt
       AS_differential_JUM_output_MXE_events_pvalue_0.05.txt
       Valid_total_A3SS_event.txt
       Valid_total_A5SS_event.txt
       Valid_total_cassette_exon_event.txt
       total_intron_retention_event.txt
       total_mixed_event.txt
       Valid_total_MXE_list.txt
       cassette_exon_coordinate.bed
       MXE_coordinate.bed
    AS_differential_JUM_output_* files record AS events that are significantly changed upon a treatment (or different tissue type etc.) in each AS event pattern category.
    Valid_total_* event.txt and total_*_event.txt record the IDs of total AS events in each category found by JUM in this tissue/cell sample.
    cassette_exon_coordinate/MXE_coordinate.bed record the coordinates of the alternatively spliced cassette exon and mutually exclusive exons in each of the AS event.

17. Enter the folder: 
      cd FINAL_JUM_OUTPUT
      
18. Run JUM_4.sh 
      bash /home/eagle/JUM_1.3.8/JUM_4.sh #directory #pvalue|adjusted_pvalue #threshold #file_num_condition_1 #file_num_condition_2
         (the command needs six input parameters: 
         parameter a. #directory: path of the downloaded JUM package
         parameter b. #pvalue or adjusted_pvalue: statistical standard to use as cut-off. Choose between pvalue or padj (multi-test adjusted pvalue).
         parameter c. #threshold: cutoff value for pvalue or padj (I.e. 0.05, 0.01, …))
	 parameter d. #file_num_condition_1: the number of samples/replicates for condition 1 that is alphabetically listed first in the experiment_design.txt file.  In our example experimental_design.txt file
	 in the JUM package, it is the number of replicates in drug-treated condition as they are named "IndexA" and IndexB", so alphabetically first. One way to make sure is to check the first line, column 16 and
	 beyond of the file "AS_differential_JUM_output_cassette_exon_events_pvalue_0.05.txt" from JUM_3.sh and see which condition is listed first, and use the number of replicates from that condition as parameter d here.
         parameter e. #file_num_condition_2: the number of samples/replicates for condition 2 that is alphabetically listed second in the experiment_design.txt file.  In our example, it is the number of no-drug replicates as
	 they are named "IndexC" and "IndexD", so alphabetically second.
	 parameter f. #a refFlat.txt file, recording known gene transcripts.  Such file should be available from UCSC genome browser for each species and users can download it to the current working directory. 
	 Note, JUM does NOT depend on any priori knowledge of annotation.  This file here is for associating the final differential AS results from JUM to genes for the convenience of users.  If an AS event is 
	 not mapped to any known gene, then the AS event will be marked as "NONE" in the gene mapping track.
     For example, suppose the user has a total of two replicates for no-drug and three replicates for drug-treated samples, and wish to use pvalue 0.05 as cut off, then run JUM_4 as:
       bash /home/eagle/JUM_1.3.8/JUM_4_2replicates.sh /home/eagle/JUM_1.3.8 pvalue 0.05 3 2 refFlat.txt
       (as we alphabetically list drug-treated samples first in the experiment_design.txt file by naming them "IndexA", "IndexB")
       
       JUM_4.sh will output files with the name: *_sorted_with_dpsi.txt
       These are the final output files.  
    
19. Output file format:

    Below I am specifying what each column means, by using an example of comparing the AS between a no-drug and a drug-treated condition, with replicates each (indexA,B are drug-treated 
    and index C,D are no-drug).
    
    You need to count the unique IDs of the second column (AS event ID) for the number of AS events that are differentially spliced between two conditions in the corresponding category (cassette exon, A5SS, 
    A3SS, intron retention, MXE, composite). The total number of AS events in each category that are identified from the biological sample under study are listed in those total event txt files. 
    
    The first four columns specify the ID of the AS event, the gene it is associated with, and the basic structure of the AS event in terms of JUM definition (refer to Figure 2 (page 28) and corresponding text in the JUM 
    manuscript for details).  In JUM, each AS event will contain several AS_structures and each AS_structure contains several sub_AS_junctions.  In general, each cassette exon AS event, intron retention event with intron size larger than read length, 
    and MXE AS event has two AS structures, and each AS structure has two sub-AS-junctions. As a result these AS event will have four lines in the final output that explain the details of the differential splicing of the event.  For intron retention
    event with intron size smaller than the read length, each AS event will contain one AS structure that has two sub-AS-junctions.  As a result these small intron retention AS event will have two lines in the final output that explain the details of 
    the differential splicing of the AS event. For A5SS and A3SS AS event, each AS event contains one AS structure and each AS structure has several sub-AS-junctions, depending on how many alternative 5' or 3' splice sites the AS event covers.  As a result 
    each A5SS and A3SS AS event will have multiple lines in the final output specifying the details of the differential splicing of the event.  For a composite AS event, each AS event contains several AS structure and each AS structure has several sub-AS-junctions, 
    depending on what the composite AS event is. As a result each composite AS event will have multiple lines in the final output specifying the details of the differential splicing of the event.
    
    Gene: The gene that the AS event is associated with.
    AS_event_ID: The AS event ID.  
    AS_structure_ID: The AS structures that the specific AS event covers.  
    sub_junction_ID: the sub_AS_junctions that each AS structure includes from the specific AS event.
    
    sub-junction_dispersion_estimate: the estimated dispersion parameter when modeling the count data as negative binomial distributions. Each sub_AS_junction receives one dispersion parameter. 
    Refer to the manuscript for details. General users don't need to pay too much attention to this.

    LRT_statistic-full_vs_reduced: The statistic calculated to perform a statistic test - check whether the corresponding sub_AS_junction is differentially spliced between conditions. This is calculated 
    from comparing two generalized linear models. Refer to the manuscript for details. General users don't need to pay too much attention to this.

    LRT_p_value-full_vs_reduced: The pvalue for the statistical test: whether the the corresponding sub_AS_junction is significantly differentially spliced between conditions.
    
    BH_adjusted_p-values:  Corrected pvalue

    drug
    no-drug
    fitting_parameter_log2fold_change_drug_no-drug: these three columns are all intermediate information calculated during the generalized linear model fitting. General users don't need to pay too much attention to this.

    sub_junction_chr
    sub_junction_start_coor	
    sub_junction_end_coor	
    sub_junction_size	
    sub_junction_strand: these five columns specified the chromosome coordinates, strand, size, etc. information of that sub_AS_junction.
	
    raw_count.IndexA	
    raw_count.IndexB	
    raw_count.IndexC	
    raw_count.IndexD: the raw read counts of reads that mapped to the sub_AS_junction in each of the conditions.
 	
    percentage_usage.IndexA	
    percentage_usage.IndexB	
    percentage_usage.IndexC	
    percentage_usage.IndexD: the percentage usage of that sub_AS_junction in the AS structure in each of the conditions. If the sub_AS_junction is significantly differentially spliced between two conditions, you can detect a significant 
    difference in the percentage usage between the two conditions (indexA,B v.s. Index C,D, for example).

    delta Percent spliced In (deltaPSI): This column describes the level of changes of that significantly differentially spliced AS event between two conditions you are comparing.
      For a cassette exon event, each AS event contains two AS_structures that include four sub_AS_junctions in total. So each cassette exon AS event will have four lines in the cassette exon output file. One deltaPsi value will be calculated for 
      each cassette exon AS event (aka, every four lines). deltaPsi here is calculated as the difference in the ratio of exon_inclusion_isoform between condition 1 and condition 2: 
      deltaPSi= exon_inclusion_isoform/(exon_inclusion_isoform+exon_exclusion_isoform) (under condition 1) - exon_inclusion_isoform/(exon_inclusion_isoform+exon_exclsion_isoform) (under condition 2). 
      condition 1 here corresponds to whichever condition sampels that are alphabetically listed first in the experiment_design.txt sample, or the samples whose raw counts are listed first as indicated in the first line (in our case it is drug-treated sample)
      of the final output file.
      
      For an intron retention event, each AS event contains either two AS_structures and four sub_AS_junctions, so, four lines in the intron_retention output file (when the intron size is longer than the RNA-seq read length), or one AS_Structure and two sub_AS_junctions, 
      so, two lines in the output file (when the intron size is smaller than the RNA-seq read length). One deltaPSI value is calculated for each AS event (every four lines or two lines). 
      Here deltaPsi=intron_inclusion_isoform/(intron_inclusion_isoform+intron_exclusion_isoform) (under condition 1) - intron_inclusion_isoform/(intron_inclusion_isoform+intron_exclusion_isoform) (under condition 2).

      For an A5SS or A3SS, each AS event contains one AS structure and several sub_AS_junctions, depending on how many alternative spliced 5'/3' splice sites are there. One deltaPsi value is calculated for EACH of the sub_AS_junction (so, every line). Here deltaPsi is calculated 
      as the change in the percentage of junction usage for each sub_AS_junction in control v.s. knockdown: 
      sub_AS_junction_i/(sub_AS_junction_1+sub_AS_junction_2+ ... + sub_AS_junction_i+...+sub_AS_junction_n) (under condition 1) - sub_AS_junction_i/(sub_AS_junction_1+sub_AS_junction_2+ ... + sub_AS_junction_i+...+sub_AS_junction_n) (under condition 2). It is calculated this way because 
      A5SS and A3SS events usually have more than two alternative splicing isoforms (not like cassette exon and intron retention which only has two isoforms so the ratio can be calculated). 

      For an MXE and mixed AS event, each AS event contains several AS structures and sub_AS_junctions, depending on the event. the deltaPsi value is calculated like A5SS and A3SS since they also can have more than two alternative splicing isoforms.
      
      Note, if an AS event is not associated with any known genes, then the "Gene" column for that event will be marked as "NONE".  Sometimes an AS event can be associated with multiple genes, based on the gene structure.  JUM will pick one of the genes that these AS events map to
      in the final output file, but will list other genes such AS events are associated with in files with suffix "AS_event_redundant_mapped_gene.txt" and users can refer to them later.
